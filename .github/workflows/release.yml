name: "BauDevs CI/CD"

on:
  push:
    branches:
      - 'release/@baudevs/*'
    tags:
      - 'release/@baudevs/*'
  workflow_dispatch:

permissions:
  contents: write
  actions: read
  issues: write
  pages: write
  pull-requests: write
  statuses: write
  id-token: write # needed for npm provenance

env:
  NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_TOKEN || '' }}
  NPM_ACCESS_TOKEN: ${{ secrets.NPM_TOKEN || '' }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Pass the GITHUB_TOKEN
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY || '' }}
  NX_EXCLUDED_PROJECTS: 'baudevs-dashboard,@baudevs/bauCmsNextExample'
  NODE_VERSION: 23.3.0
  PNPM_VERSION: 9.15.2

jobs:
  analyze-changes:
    if: |
      startsWith(github.ref, 'refs/heads/release/') &&
      !contains(github.event.head_commit.message, '[skip ci]') &&
      !contains(github.event.head_commit.message, 'chore: version plan')
    runs-on: ubuntu-latest
    outputs:
      project_name: ${{ steps.extract-info.outputs.project }}
      version_type: ${{ steps.analyze-version.outputs.version_type }}
      needs_human_review: ${{ steps.analyze-version.outputs.needs_review }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract Project Info
        id: extract-info
        run: |
          BRANCH_NAME="${{ github.ref_name }}"
          PROJECT_NAME=$(echo $BRANCH_NAME | sed -E 's#^release/(@baudevs/)?([^@/]+)[@/].*$#\1\2#')
          echo "project=$PROJECT_NAME" >> $GITHUB_OUTPUT

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup Pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install Dependencies
        run: pnpm install

      - name: Install tsx globally
        run: pnpm add -g tsx

      - name: Build and install bau-log-hero
        run: |
          echo "Building bau-log-hero for local use..."
          pnpm nx build @baudevs/bau-log-hero --skip-nx-cache

          echo "Installing built package..."
          cd tools/release-tools
          pnpm uninstall @baudevs/bau-log-hero || true
          pnpm add "file:../../dist/libs/@baudevs/bau-log-hero"
          cd ../../

      - name: Analyze Changes
        id: analyze-version
        run: |
          cd tools/release-tools
          echo "Running analysis..."
          pnpm tsx src/cli.ts analyze
          cd ../../
        env:
          OPENAI_API_KEY: ${{ env.OPENAI_API_KEY }}

  human-review:
    needs: analyze-changes
    if: |
      needs.analyze-changes.outputs.needs_human_review == 'true' ||
      needs.analyze-changes.outputs.version_type == 'none' ||
      needs.analyze-changes.outputs.version_type == 'other' ||
      needs.analyze-changes.outputs.version_type == 'unknown'
    runs-on: ubuntu-latest
    environment: production
    outputs:
      version_type: ${{ steps.approval.outputs.approved_word }}
    steps:
      - name: Wait for Human Review
        id: approval
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ secrets.GITHUB_TOKEN }}
          approvers: qtagtech
          minimum-approvals: 1
          additional-approved-words: 'patch,minor,major'
          issue-title: "Version Type Review Required for ${{ needs.analyze-changes.outputs.project_name }}"
          issue-body: |
            Automatic Versioning System needs human review for version type.
            Please answer this issue with ONLY ONE of these exact words:
            - patch (for bug fixes)
            - minor (for new features)
            - major (for breaking changes)

            Project: @baudevs/${{ needs.analyze-changes.outputs.project_name }}

            Automatic Versioning System Status:
            ${{ needs.analyze-changes.outputs.reasoning }}

            Note: Your response must be exactly one of: patch, minor, or major

  create-version-plan:
    needs: [analyze-changes, human-review]
    if: |
      always() &&
      (needs.analyze-changes.outputs.needs_human_review == 'false' ||
       needs.human-review.result == 'success')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup Pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install Dependencies
        run: pnpm install

      - name: Git pull
        run: git pull -X theirs

      - name: Create Version Plan
        run: |
          cd tools/release-tools

          # Always prefer human review response if available
          VERSION_TYPE="${{ needs.human-review.outputs.version_type }}"

          # Only use analyze-changes output if human review wasn't needed
          if [ "${{ needs.analyze-changes.outputs.needs_human_review }}" = "false" ]; then
            VERSION_TYPE="${{ needs.analyze-changes.outputs.version_type }}"
          fi

          # Validate version type
          if [ -z "$VERSION_TYPE" ] || [ "$VERSION_TYPE" = "unknown" ] || [ "$VERSION_TYPE" = "none" ] || [ "$VERSION_TYPE" = "other" ]; then
            echo "Error: Invalid version type: $VERSION_TYPE"
            echo "Version type must be one of: patch, minor, major"
            echo "Setting version type to 'patch' by default"
            VERSION_TYPE="patch"
          fi

          echo "Using version type: $VERSION_TYPE"
          pnpm tsx src/cli.ts create-version-plan \
            --project="${{ needs.analyze-changes.outputs.project_name }}" \
            --version-type="$VERSION_TYPE" \
            --only-touched=false
          cd ../../

  release:
    needs: [create-version-plan, analyze-changes]
    if: |
      always() &&
      (needs.create-version-plan.result == 'success')
    uses: ./.github/workflows/release-with-plan.yml
    with:
      project: "${{ needs.analyze-changes.outputs.project_name }}"
    secrets:
      NX_TOKEN: ${{ secrets.NX_TOKEN }}
      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      GH_PAT: ${{ secrets.GITHUB_TOKEN }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}


  merge-to-production:
    needs: release
    if: startsWith(github.ref, 'refs/tags/release/')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: production
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Merge Tag to Production
        run: |
          git config --global user.name "baudevs"
          git config --global user.email "tech@baudevs.com"

          # Get the tag name
          TAG_NAME=${GITHUB_REF#refs/tags/}

          # Merge the tag into production
          git fetch origin tag $TAG_NAME
          git merge $TAG_NAME --ff-only

          # Push to production
          git push origin production
