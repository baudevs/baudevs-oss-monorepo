name: "Release with Version Plan"

on:
  workflow_call:
    secrets:
      NPM_TOKEN:
        required: true
      GH_PAT:
        required: true
      NX_TOKEN:
        required: true

env:
  NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_TOKEN || '' }}
  NPM_ACCESS_TOKEN: ${{ secrets.NPM_TOKEN || '' }}
  GITHUB_TOKEN: ${{ secrets.GH_PAT || '' }}
  NX_EXCLUDED_PROJECTS: 'baudevs-dashboard,@baudevs/bauCmsNextExample'
  NODE_VERSION: '23.x'
  PNPM_VERSION: '9.15.1'

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: 'https://registry.npmjs.org'

      - name: Setup Pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install Dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Set SHAs for Affected Commands
        run: pnpm nx set-shas

      - name: Build and Test
        run: |
          pnpm nx affected --target=lint --exclude=${{ env.NX_EXCLUDED_PROJECTS }}
          pnpm nx affected --target=build --exclude=${{ env.NX_EXCLUDED_PROJECTS }}

      - name: Get Project from Version Plan
        id: get-project
        run: |
          PLAN_FILE=$(ls -t .nx/version-plans/version-plan-*.md | head -n1)
          PROJECT=$(grep -m1 "^## Project" "$PLAN_FILE" | cut -d'"' -f2)
          echo "project=$PROJECT" >> $GITHUB_OUTPUT

      - name: Execute Release
        run: |
          echo "Releasing project: ${{ steps.get-project.outputs.project }}"
          pnpm nx release ${{ steps.get-project.outputs.project }}
        env:
          GITHUB_TOKEN: ${{ env.GITHUB_TOKEN }}

      - name: Publish Package
        run: |
          echo "Publishing project: ${{ steps.get-project.outputs.project }}"
          pnpm nx release publish ${{ steps.get-project.outputs.project }}
        env:
          NPM_TOKEN: ${{ env.NPM_ACCESS_TOKEN }}
