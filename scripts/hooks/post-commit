#!/bin/sh

# Guard against recursive execution
if [ -n "$SKIP_POST_COMMIT" ]; then
  echo "üõë Skipping post-commit hook (SKIP_POST_COMMIT is set)"
  exit 0
fi

# Get list of changed files in the last commit
echo "üìã Getting changed files..."
CHANGED_FILES=$(git diff-tree --no-commit-id --name-only -r HEAD)
echo "Changed files:"
echo "$CHANGED_FILES"

# Check if only version files were changed
VERSION_PATTERN="(versions/.*\.json|metadata-history\.json|apps/baudevs-dashboard/public/(local-metadata\.json|metadata-history\.json|versions/.*\.json))$"
NON_VERSION_FILES=$(echo "$CHANGED_FILES" | grep -v -E "$VERSION_PATTERN")

if [ -z "$NON_VERSION_FILES" ]; then
  echo "‚ú® Only version files were changed, skipping metadata generation"
  exit 0
fi

echo "üì¶ Non-version files changed:"
echo "$NON_VERSION_FILES"

# Get the current git user info
AUTHOR_NAME=$(git config user.name)
AUTHOR_EMAIL=$(git config user.email)
BRANCH=$(git rev-parse --abbrev-ref HEAD)
COMMIT=$(git rev-parse HEAD)

# Check if gtimeout (from coreutils) or timeout is available
if command -v gtimeout >/dev/null 2>&1; then
  TIMEOUT_CMD="gtimeout"
elif command -v timeout >/dev/null 2>&1; then
  TIMEOUT_CMD="timeout"
else
  TIMEOUT_CMD=""
fi

# Generate metadata with a timeout if available
echo "üîç Generating repository metadata..."
if [ -n "$TIMEOUT_CMD" ]; then
  $TIMEOUT_CMD 30s bun run scripts/generate-repo-metadata.ts \
    --author "$AUTHOR_NAME" \
    --email "$AUTHOR_EMAIL" \
    --branch "$BRANCH" \
    --commit "$COMMIT" \
    --local

  if [ $? -eq 124 ]; then
    echo "‚ùå Metadata generation timed out after 30 seconds"
    exit 1
  fi
else
  bun run scripts/generate-repo-metadata.ts \
    --author "$AUTHOR_NAME" \
    --email "$AUTHOR_EMAIL" \
    --branch "$BRANCH" \
    --commit "$COMMIT" \
    --local
fi

# Check if metadata files exist in root directory
if [ ! -f "versions/latest.json" ] || [ ! -f "metadata-history.json" ]; then
  echo "‚ùå Root metadata files not found"
  exit 1
fi

# Copy to dashboard public directory
echo "üìã Updating dashboard metadata..."
mkdir -p apps/baudevs-dashboard/public/versions

# Copy files and check for errors
if ! cp versions/latest.json apps/baudevs-dashboard/public/local-metadata.json; then
  echo "‚ùå Failed to copy latest.json to local-metadata.json"
  exit 1
fi

if ! cp metadata-history.json apps/baudevs-dashboard/public/metadata-history.json; then
  echo "‚ùå Failed to copy metadata-history.json"
  exit 1
fi

echo "‚úÖ Successfully copied metadata files"

# Check if metadata files changed
echo "üîç Checking for metadata changes..."
if git diff --quiet apps/baudevs-dashboard/public/local-metadata.json apps/baudevs-dashboard/public/metadata-history.json; then
  echo "‚ú® No metadata changes detected"
else
  echo "üìù Committing metadata changes..."
  export SKIP_POST_COMMIT=1
  git add apps/baudevs-dashboard/public/local-metadata.json apps/baudevs-dashboard/public/metadata-history.json
  git commit --amend --no-edit
  unset SKIP_POST_COMMIT
fi

echo "‚úÖ Post-commit hook completed successfully"
