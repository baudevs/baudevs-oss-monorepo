#!/bin/sh

# Check if we're in a worktree
GIT_DIR=$(git rev-parse --git-dir)
if [ "$GIT_DIR" != ".git" ]; then
  printf "\n🌳 \033[1;36mWorktree detected\033[0m - Skipping post-commit hook\n\n"
  exit 0
fi

# Skip if SKIP_POST_COMMIT is set
if [ -n "$SKIP_POST_COMMIT" ]; then
  printf "\n⏭️  \033[1;33mSKIP_POST_COMMIT\033[0m is set - Skipping post-commit hook\n\n"
  exit 0
fi

# Initialize nvm
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"

# Use the project's Node.js version
if [ -f ".nvmrc" ]; then
  printf "\n🔄 Loading Node version from .nvmrc\n"
  nvm use
else
  printf "\n⚠️  No .nvmrc found - Using default Node version\n"
  nvm use default
fi

# Get commit info
COMMIT=$(git rev-parse HEAD)
BRANCH=$(git rev-parse --abbrev-ref HEAD)
AUTHOR=$(git log -1 --pretty=format:'%an')
EMAIL=$(git log -1 --pretty=format:'%ae')

printf "\n📊 \033[1;34mCommit Details\033[0m\n"
printf "┌─────────────┬────────────────────────────────────────────┐\n"
printf "│ Branch      │ %-44s │\n" "$BRANCH"
printf "│ Commit      │ %-44s │\n" "$COMMIT"
printf "│ Author      │ %-44s │\n" "$AUTHOR"
printf "│ Email       │ %-44s │\n" "$EMAIL"
printf "└─────────────┴────────────────────────────────────────────┘\n"

# Check if this commit only contains version files
CHANGED_FILES=$(git diff-tree --no-commit-id --name-only -r HEAD)
VERSION_FILES_ONLY=true
for file in $CHANGED_FILES; do
  if [[ ! "$file" =~ versions/.*\.json$ ]] && [[ ! "$file" =~ metadata-history\.json$ ]] && [[ ! "$file" =~ local-metadata\.json$ ]]; then
    VERSION_FILES_ONLY=false
    break
  fi
done

if [ "$VERSION_FILES_ONLY" = true ]; then
  printf "\n🔄 \033[1;33mOnly version files changed\033[0m - Skipping metadata generation\n\n"
  exit 0
fi

# Set environment variable to prevent recursive execution
export SKIP_POST_COMMIT=1

# Generate metadata
printf "\n📝 \033[1;32mGenerating metadata\033[0m for commit \033[1;36m$COMMIT\033[0m\n"
bun scripts/generate-repo-metadata.ts --author="$AUTHOR" --email="$EMAIL" --branch="$BRANCH" --commit="$COMMIT"

# Add metadata files to git if they exist
if [ -f "metadata-history.json" ] || [ -f "local-metadata.json" ]; then
  printf "\n📦 \033[1;32mUpdating\033[0m metadata files in git\n"
  git add metadata-history.json local-metadata.json 2>/dev/null || true
  git commit --amend --no-edit
fi
